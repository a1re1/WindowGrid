#!/usr/bin/env python3
import os
import gi
gi.require_version("Gtk", "3.0")
gi.require_version("Wnck", "3.0")
from gi.repository import Gtk, Wnck, Gdk, Gio
from itertools import product

import window_shuffler_no_gui as shfler
import shuffler_tools as util
import shuffler_geo as geo

relPath = os.path.dirname(__file__)
css_data = util.importFile(relPath + "/shuffler.css")


"""
WindowShuffler
Author: Jacob Vlijm
Co Author: Tyler Whitehurst
Copyright Â© 2017-2018 Ubuntu Budgie Developers
Website=https://ubuntubudgie.org
This program is free software: you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation, either version 3 of the License, or any later version. This
program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
A PARTICULAR PURPOSE. See the GNU General Public License for more details. You
should have received a copy of the GNU General Public License along with this
program.  If not, see <https://www.gnu.org/licenses/>.
"""

UI_GRID_MARGIN = 0
UI_GRID_CELL_OPACITY = 0.7

class WindowShufflerMatrix(Gtk.Window):

    def __init__(self):
        Gtk.Window.__init__(self, title="WindowMatrix")
        self.connect("destroy", Gtk.main_quit)
        self.set_position(Gtk.WindowPosition.CENTER_ALWAYS)
        self.set_decorated(False)
        self.grid_last_modified_at = util.get_grid_modified_at()
        self.ui = None

        # keys
        self.connect("key-press-event", self.register_key_input, "press")
        self.connect("key-release-event", self.register_key_input, "release")

        # styling
        self.provider = Gtk.CssProvider.new()
        self.provider.load_from_data(css_data.encode())

        # transparency
        screen = self.get_screen()
        visual = screen.get_rgba_visual()
        if all([visual, screen.is_composited()]):
            self.set_visual(visual)
        self.set_app_paintable(True)

        # Wnck
        self.screendata = Wnck.Screen.get_default()
        self.screendata.force_update()

        self.firstrun()
        self.draw_ui()
        self.ui.show_all()
        self.set_keep_above(True)
        self.set_accept_focus(True)
        self.present()
        Gtk.main()


    def firstrun(self):
      if not os.path.exists(util.firstrun):
        self.show_info()
        open(util.firstrun, "wt").write("")


    def snap_all_to_grid(self, button=None):
        shfler.snap_all_to_grid()
        self.exit()


    def draw_grid_button(self, row, col):
        button = Gtk.Button()
        tile_dim = shfler.get_grid_tile_dimensions()
        button.set_size_request(tile_dim[0], tile_dim[1])
        self.set_widgetstyle(button, [], ["matrixbutton"])
        self.set_opacity(UI_GRID_CELL_OPACITY)
        return button


    def draw_ui(self):
      if self.ui:
        self.remove(self.ui)
      self.ui = Gtk.Grid()
      self.ui.set_column_spacing(UI_GRID_MARGIN)
      self.ui.set_row_spacing(UI_GRID_MARGIN)
      self.add(self.ui)

      grid_dimensions = util.get_grid()
      for r in range(grid_dimensions[1]):
          rowpos = r + 1
          for c in range(grid_dimensions[0]):
              colpos = c
              button = self.draw_grid_button(c, r)
              self.ui.attach(button, colpos, rowpos, 1, 1)

      self.ui.show_all()


    def set_widgetstyle(self, widget, remove, add):
        # set/update widget style
        style_context = widget.get_style_context()
        for rm in remove:
            style_context.remove_class(rm)
        for ad in add:
            style_context.add_class(ad)
        Gtk.StyleContext.add_provider(
            style_context,
            self.provider,
            Gtk.STYLE_PROVIDER_PRIORITY_APPLICATION,
        )


    def register_key_input(self, button, value, event):
        key = Gdk.keyval_name(value.keyval)
        if key == "Escape":
          self.exit()
        self.draw_ui()


    def exit(self, *args):
        Gtk.main_quit()


WindowShufflerMatrix()